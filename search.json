[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement opensource@data.gouv.fr. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Daniel Rakotomalala Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Rakotomalala. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rakotomalala D (2024). industtry: Toolkit Structured Datasets Exploitation. R package version 0.2.0.","code":"@Manual{,   title = {industtry: A Toolkit for Structured Datasets Exploitation},   author = {Daniel Rakotomalala},   year = {2024},   note = {R package version 0.2.0}, }"},{"path":"/index.html","id":"the-industtry-package---a-toolkit-for-structured-datasets-exploitation","dir":"","previous_headings":"","what":"A Toolkit for Structured Datasets Exploitation","title":"A Toolkit for Structured Datasets Exploitation","text":"package proposes set functions helps exploiting structured datasets (mostly data frames) industrialization approach. Industrialization means applying efficiently possible procedure number inputs long inputs identified common structure. ’s best use RStudio. contribution probably idea applying transformations set level (number data frames, e.g), given numerous existing package hepls user exploit one dataset time. functions package line philosophy : convert_r(), inspect_vars(), serial_import() parallel_import(). package also provides set micro-tools dealing usual data transformation tasks, particularly R/RStudio.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Toolkit for Structured Datasets Exploitation","text":"can install development version industtry GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"danielrak/industtry\")"},{"path":"/reference/assign_to_global.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign to global environment — assign_to_global","title":"Assign to global environment — assign_to_global","text":"Assign global environment","code":""},{"path":"/reference/assign_to_global.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign to global environment — assign_to_global","text":"","code":"assign_to_global(name, object, pos)"},{"path":"/reference/assign_to_global.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Assign to global environment — assign_to_global","text":"https://stackoverflow.com/questions/28180989/r-cmd-check-found--following-assignments---global-environment","code":""},{"path":"/reference/assign_to_global.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign to global environment — assign_to_global","text":"name Character. Name assign object object Object assign name pos Integer 1L","code":""},{"path":"/reference/assign_to_global.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign to global environment — assign_to_global","text":"function. Assignment global environment","code":""},{"path":"/reference/chars_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Get :alpha: / :digit: patterns from each symbol of character vector — chars_structure","title":"Get :alpha: / :digit: patterns from each symbol of character vector — chars_structure","text":"Get :alpha: / :digit: patterns symbol character vector","code":""},{"path":"/reference/chars_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get :alpha: / :digit: patterns from each symbol of character vector — chars_structure","text":"","code":"chars_structure(input_vector, unique = TRUE, named_output = TRUE)"},{"path":"/reference/chars_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get :alpha: / :digit: patterns from each symbol of character vector — chars_structure","text":"input_vector Character. Vector process unique Logical 1L. TRUE, result reduced unique values. named_output Logical 1L. TRUE, output vector named corresponding input values.","code":""},{"path":"/reference/chars_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get :alpha: / :digit: patterns from each symbol of character vector — chars_structure","text":"Character. Vector describing structure elements input_vector, see example.","code":""},{"path":"/reference/chars_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get :alpha: / :digit: patterns from each symbol of character vector — chars_structure","text":"","code":"library(magrittr) input <- c(\"ABC123\", \"DE4F56\", \"789GHI\", \"ABC123\")  # Default values of unique and named_output:  chars_structure(input_vector = input, unique = TRUE, named_output = TRUE) #>           ABC123           DE4F56           789GHI  #>         \"3A, 3D\" \"2A, 1D, 1A, 2D\"         \"3D, 3A\"   # unique is set to default value TRUE and named_output is set to FALSE:  chars_structure(input_vector = input, unique = TRUE, named_output = FALSE) #> [1] \"3A, 3D\"         \"2A, 1D, 1A, 2D\" \"3D, 3A\"          # unique is set to FALSE and named_output to FALSE:  chars_structure(input_vector = input, unique = FALSE, named_output = FALSE) #> [1] \"3A, 3D\"         \"2A, 1D, 1A, 2D\" \"3D, 3A\"         \"3A, 3D\"          # unique is set to FALSE and named_output to defalut value TRUE:  chars_structure(input_vector = input, unique = FALSE, named_output = TRUE) #>           ABC123           DE4F56           789GHI           ABC123  #>         \"3A, 3D\" \"2A, 1D, 1A, 2D\"         \"3D, 3A\"         \"3A, 3D\""},{"path":"/reference/convert_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Industrialized dataset formats conversion (RStudio only) — convert_r","title":"Industrialized dataset formats conversion (RStudio only) — convert_r","text":"Industrialized dataset formats conversion (RStudio )","code":""},{"path":"/reference/convert_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Industrialized dataset formats conversion (RStudio only) — convert_r","text":"","code":"convert_r(mask_filepath, output_path)"},{"path":"/reference/convert_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Industrialized dataset formats conversion (RStudio only) — convert_r","text":"mask_filepath Character 1L. Entire file path excel mask output_path Character 1L. Folder path converted datasets placed","code":""},{"path":"/reference/convert_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Industrialized dataset formats conversion (RStudio only) — convert_r","text":"","code":"library(magrittr)  mydir <- system.file(\"permadir_examples_and_tests/convert_r\", package = \"industtry\")  # Datasets to convert (one-shot): # rio::export(cars, file.path(mydir, \"original_cars.rds\")) # rio::export(mtcars, file.path(mydir, \"original_mtcars.csv\"))  # Create an artificial compatible mask with R: mask <- data.frame(   \"folder_path\" = rep(mydir, 2),   \"file\" = c(\"original_cars.rds\", \"original_mtcars.csv\"),   \"converted_file\" = c(\"converted_cars.parquet\", \"converted_mtcars.parquet\"),   \"to_convert\" = rep(1, 2) ) writexl::write_xlsx(mask, file.path(mydir, \"mask_convert_r.xlsx\"))  if (rstudioapi::isAvailable()) {   convert_r(     mask_filepath = file.path(mydir, \"mask_convert_r.xlsx\"),     output_path = mydir)} else {       message(\"You're not in RStudio. This example will not run.\")     } #> You're not in RStudio. This example will not run.  # See original and converted files: list.files(mydir) %>% purrr::keep(stringr::str_detect(., \"cars\")) #> [1] \"original_cars.rds\"   \"original_mtcars.csv\"  # Remove converted files for tests integrity: file.remove(file.path(   mydir,   c(\"converted_cars.parquet\", \"converted_mtcars.parquet\"))) #> Warning: cannot remove file '/home/runner/work/_temp/Library/industtry/permadir_examples_and_tests/convert_r/converted_cars.parquet', reason 'No such file or directory' #> Warning: cannot remove file '/home/runner/work/_temp/Library/industtry/permadir_examples_and_tests/convert_r/converted_mtcars.parquet', reason 'No such file or directory' #> [1] FALSE FALSE"},{"path":"/reference/current_script_location.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio only - Get exact path of the currently opened script — current_script_location","title":"RStudio only - Get exact path of the currently opened script — current_script_location","text":"function works RStudio opened source document. exceptionnaly example exact test since running background sessions checks.","code":""},{"path":"/reference/current_script_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio only - Get exact path of the currently opened script — current_script_location","text":"","code":"current_script_location()"},{"path":"/reference/current_script_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RStudio only - Get exact path of the currently opened script — current_script_location","text":"Character 1L. character vector indicating exact path currently opened script","code":""},{"path":"/reference/dupl_show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show observations of all duplicated values of a variable or a combination of variables — dupl_show","title":"Show observations of all duplicated values of a variable or a combination of variables — dupl_show","text":"Show observations duplicated values variable combination variables","code":""},{"path":"/reference/dupl_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show observations of all duplicated values of a variable or a combination of variables — dupl_show","text":"","code":"dupl_show(data_frame, vars)"},{"path":"/reference/dupl_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show observations of all duplicated values of a variable or a combination of variables — dupl_show","text":"data_frame Data.frame. Input data frame. Must Global Environment data.frame class vars Character. Vector variable combination variables duplicates checked","code":""},{"path":"/reference/dupl_show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show observations of all duplicated values of a variable or a combination of variables — dupl_show","text":"Data.frame. part inputted data frame observations duplicated values indicated variable combination variables","code":""},{"path":"/reference/dupl_show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show observations of all duplicated values of a variable or a combination of variables — dupl_show","text":"","code":"# A fictional data with duplicated values: df <- data.frame(\"person_id\" = c(1, 1, 2, 3,                                  2, 4, 5, 5 ,1),                  \"person_age\" = c(25, 25, 21, 32,                                   21, 48, 50, 50, 52),                  \"survey_month\" = c(\"jan\", \"feb\", \"mar\", \"apr\",                                     \"apr\", \"may\", \"jun\", \"jul\", \"jan\"),                  \"survey_answer\" = c(\"no\", \"yes\", \"no\", \"yes\",                                      \"yes\", \"yes\", \"no\", \"yes\", NA))  # Shuffling observations and columns to make duplicates difficult to see: set.seed(1) df <- df[sample(1:nrow(df)),          sample(1:ncol(df))] df #>   person_id survey_month survey_answer person_age #> 7         5          jun            no         50 #> 3         2          mar            no         21 #> 6         4          may           yes         48 #> 2         1          feb           yes         25 #> 8         5          jul           yes         50 #> 5         2          apr           yes         21 #> 1         1          jan            no         25 #> 4         3          apr           yes         32 #> 9         1          jan          <NA>         52  # See all of the rows where person_id has more than an unique possible value:  dupl_show(data = df, var = \"person_id\") #>   person_id survey_month survey_answer person_age #> 1         1          feb           yes         25 #> 2         1          jan            no         25 #> 3         1          jan          <NA>         52 #> 4         2          mar            no         21 #> 5         2          apr           yes         21 #> 6         5          jun            no         50 #> 7         5          jul           yes         50  # See all of the rows where the combination of person_id and survey_month variables has  # more than an unique possible value :  dupl_show(data = df, var = c(\"person_id\", \"survey_month\")) #>   person_id survey_month survey_answer person_age #> 1         1          jan            no         25 #> 2         1          jan          <NA>         52"},{"path":"/reference/dupl_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Illustrate sources of all duplicated values of a variable or a combination of variables — dupl_sources","title":"Illustrate sources of all duplicated values of a variable or a combination of variables — dupl_sources","text":"Illustrate sources duplicated values variable combination variables","code":""},{"path":"/reference/dupl_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Illustrate sources of all duplicated values of a variable or a combination of variables — dupl_sources","text":"","code":"dupl_sources(data_frame, vars, output_as_df = FALSE)"},{"path":"/reference/dupl_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Illustrate sources of all duplicated values of a variable or a combination of variables — dupl_sources","text":"data_frame Data.frame. Input data frame. Must Global Environment data.frame class vars Character. Vector variable combination variables duplicates checked output_as_df Logical 1L. TRUE, output rendered data.frame.","code":""},{"path":"/reference/dupl_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Illustrate sources of all duplicated values of a variable or a combination of variables — dupl_sources","text":"List data.frame. duplicated row regarding vars, different values variable shown, separated ","code":""},{"path":"/reference/dupl_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Illustrate sources of all duplicated values of a variable or a combination of variables — dupl_sources","text":"","code":"# A fictional data with duplicated values: df <- data.frame(\"person_id\" = c(1, 1, 2, 3,                                  2, 4, 5, 5 ,1),                  \"person_age\" = c(25, 25, 21, 32,                                   21, 48, 50, 50, 52),                  \"survey_month\" = c(\"jan\", \"feb\", \"mar\", \"apr\",                                     \"apr\", \"may\", \"jun\", \"jul\", \"jan\"),                  \"survey_answer\" = c(\"no\", \"yes\", \"no\", \"yes\",                                      \"yes\", \"yes\", \"no\", \"yes\", NA))  # Shuffling observations and columns to make duplicates difficult to see: set.seed(1) df <- df[sample(1:nrow(df)),          sample(1:ncol(df))] df #>   person_id survey_month survey_answer person_age #> 7         5          jun            no         50 #> 3         2          mar            no         21 #> 6         4          may           yes         48 #> 2         1          feb           yes         25 #> 8         5          jul           yes         50 #> 5         2          apr           yes         21 #> 1         1          jan            no         25 #> 4         3          apr           yes         32 #> 9         1          jan          <NA>         52  dupl_sources(data_frame = df, vars = \"person_id\") #> $`Duplicate sources where person_id equals 1` #>                      values #> person_id                 1 #> survey_month  feb [AND] jan #> survey_answer  yes [AND] no #> person_age      25 [AND] 52 #>  #> $`Duplicate sources where person_id equals 2` #>                      values #> person_id                 2 #> survey_month  mar [AND] apr #> survey_answer  no [AND] yes #>  #> $`Duplicate sources where person_id equals 5` #>                      values #> person_id                 5 #> survey_month  jun [AND] jul #> survey_answer  no [AND] yes #>  dupl_sources(data_frame = df, vars = \"person_id\", output_as_df = TRUE) #>   person_id  survey_month survey_answer  person_age #> 1         1 feb [AND] jan  yes [AND] no 25 [AND] 52 #> 2         2 mar [AND] apr  no [AND] yes        <NA> #> 3         5 jun [AND] jul  no [AND] yes        <NA>"},{"path":"/reference/folder_structure_replicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Replicate the folder structure of a given directory — folder_structure_replicate","title":"Replicate the folder structure of a given directory — folder_structure_replicate","text":"Replicate folder structure given directory","code":""},{"path":"/reference/folder_structure_replicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replicate the folder structure of a given directory — folder_structure_replicate","text":"","code":"folder_structure_replicate(dir, to)"},{"path":"/reference/folder_structure_replicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replicate the folder structure of a given directory — folder_structure_replicate","text":"dir Character 1L. Path directory structure replicated Character 1L. Path output directory replicated structured placed","code":""},{"path":"/reference/folder_structure_replicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replicate the folder structure of a given directory — folder_structure_replicate","text":"See directory indicated arg.","code":""},{"path":"/reference/folder_structure_replicate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replicate the folder structure of a given directory — folder_structure_replicate","text":"","code":"library(magrittr)  temp_dir_to_replicate <- tempfile() dir.create(temp_dir_to_replicate)  dir.create(file.path(temp_dir_to_replicate, \"dir1\")) dir.create(file.path(temp_dir_to_replicate, \"dir2\"))  temp_dir_out <- tempfile() dir.create(temp_dir_out)  folder_structure_replicate(   dir = temp_dir_to_replicate,    to = temp_dir_out)  unlink(temp_dir_to_replicate) unlink(temp_dir_out)"},{"path":"/reference/industtry-package.html","id":null,"dir":"Reference","previous_headings":"","what":"industtry: A Toolkit for Structured Datasets Exploitation — industtry-package","title":"industtry: A Toolkit for Structured Datasets Exploitation — industtry-package","text":"package proposes set functions helps exploiting structured datasets (mostly data frames) industrialization approach. Industrialization means applying efficiently possible procedure number inputs long inputs identified common structure.","code":""},{"path":"/reference/industtry-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"industtry: A Toolkit for Structured Datasets Exploitation — industtry-package","text":"Maintainer: Daniel Rakotomalala rakdanielh@gmail.com","code":""},{"path":"/reference/inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect a data frame — inspect","title":"Inspect a data frame — inspect","text":"Inspect data frame","code":""},{"path":"/reference/inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect a data frame — inspect","text":"","code":"inspect(data_frame, nrow = FALSE)"},{"path":"/reference/inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect a data frame — inspect","text":"data_frame Data.frame. data.frame explore. Need exist Global Environment. nrow Logical 1L. TRUE, number observations dataset rendered addition.","code":""},{"path":"/reference/inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect a data frame — inspect","text":"Variable list dataset systematic informations variable.","code":""},{"path":"/reference/inspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect a data frame — inspect","text":"","code":"library(magrittr) inspect(CO2) #> # A tibble: 6 × 10 #>   variables class   nb_distinct prop_distinct nb_na prop_na nb_void prop_void #>   <chr>     <chr>         <int>         <dbl> <int>   <dbl>   <int>     <dbl> #> 1 Plant     ordered          12        0.143      0       0       0         0 #> 2 Plant     factor           12        0.143      0       0       0         0 #> 3 Type      factor            2        0.0238     0       0       0         0 #> 4 Treatment factor            2        0.0238     0       0       0         0 #> 5 conc      numeric           7        0.0833     0       0       0         0 #> 6 uptake    numeric          76        0.905      0       0       0         0 #> # ℹ 2 more variables: nchars <chr>, modalities <chr>"},{"path":"/reference/inspect_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect a collection of datasets — inspect_vars","title":"Inspect a collection of datasets — inspect_vars","text":"Inspect collection datasets","code":""},{"path":"/reference/inspect_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect a collection of datasets — inspect_vars","text":"","code":"inspect_vars(input_path, output_path, output_label, considered_extensions)"},{"path":"/reference/inspect_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect a collection of datasets — inspect_vars","text":"input_path Character 1L. Folder path datasets explore output_path Character 1L. Folder path exploration output stored output_label Character 1L. Describe concisely collection explore considered_extensions Character. Extensions datasets retained exploration input folder. type \".\" (dot) . E.g (\"parquet\" \".parquet\")","code":""},{"path":"/reference/inspect_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect a collection of datasets — inspect_vars","text":"excel file written computer containing exploration information","code":""},{"path":"/reference/inspect_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect a collection of datasets — inspect_vars","text":"","code":"mydir <- file.path(tempdir(), \"inspect_vars_tests_examples\") dir.create(mydir)  library(magrittr) saveRDS(cars, file.path(mydir, \"cars1.rds\")) saveRDS(mtcars, file.path(mydir, \"cars2.rds\"))  # Code below illustrates how to use the function: inspect_vars(input_path = mydir, output_path = mydir,               output_label = \"cardata\",               considered_extensions = \"rds\") #> Warning: The `trust` argument of `import()` should be explicit for serialization formats #> as of rio 1.0.3. #> ℹ Missing `trust` will be set to FALSE by default for RDS in 2.0.0. #> ℹ The deprecated feature was likely used in the rio package. #>   Please report the issue at <https://github.com/gesistsa/rio/issues>. #> Joining by: union #> Joining by: union   purrr::map(1:10, \\(x)             rio::import(file.path(mydir, \"inspect_vars_cardata.xlsx\"),                         sheet = x)) %>%  magrittr::set_names(c(\"dims\", \"inspect_tot\", \"inspect_cars1\", \"inspect_cars2\",             \"vars_detect\", \"vars_detect_everywhere\", \"vars_detect_not_everywhere\",             \"vars_compclasses\", \"vars_compclasses_allsame\", \"vars_compclasses_not_allsame\")) #> $dims #>   datasets nobs nvar #> 1    cars1   50    2 #> 2    cars2   32   11 #>  #> $inspect_tot #>    datasets nvar nobs variables   class nb_distinct prop_distinct nb_na prop_na #> 1     cars1    2   50     speed numeric          19          0.38     0       0 #> 2     cars1    2   50      dist numeric          35           0.7     0       0 #> 3     cars2   11   32       mpg numeric          25       0.78125     0       0 #> 4     cars2   11   32       cyl numeric           3       0.09375     0       0 #> 5     cars2   11   32      disp numeric          27       0.84375     0       0 #> 6     cars2   11   32        hp numeric          22        0.6875     0       0 #> 7     cars2   11   32      drat numeric          22        0.6875     0       0 #> 8     cars2   11   32        wt numeric          29       0.90625     0       0 #> 9     cars2   11   32      qsec numeric          30        0.9375     0       0 #> 10    cars2   11   32        vs numeric           2        0.0625     0       0 #> 11    cars2   11   32        am numeric           2        0.0625     0       0 #> 12    cars2   11   32      gear numeric           3       0.09375     0       0 #> 13    cars2   11   32      carb numeric           6        0.1875     0       0 #>    nb_void prop_void        nchars #> 1        0         0         1 / 2 #> 2        0         0     1 / 2 / 3 #> 3        0         0         2 / 4 #> 4        0         0             1 #> 5        0         0 2 / 3 / 4 / 5 #> 6        0         0         2 / 3 #> 7        0         0     1 / 3 / 4 #> 8        0         0     3 / 4 / 5 #> 9        0         0     2 / 4 / 5 #> 10       0         0             1 #> 11       0         0             1 #> 12       0         0             1 #> 13       0         0             1 #>                                                                  modalities #> 1                               4 / 7 / 8 / 9 / 10 / 11 / 12 / 13 / 14 / 15 #> 2                             2 / 4 / 10 / 14 / 16 / 17 / 18 / 20 / 22 / 24 #> 3         10.4 / 13.3 / 14.3 / 14.7 / 15 / 15.2 / 15.5 / 15.8 / 16.4 / 17.3 #> 4                                                                 4 / 6 / 8 #> 5        71.1 / 75.7 / 78.7 / 79 / 95.1 / 108 / 120.1 / 120.3 / 121 / 140.8 #> 6                         52 / 62 / 65 / 66 / 91 / 93 / 95 / 97 / 105 / 109 #> 7          2.76 / 2.93 / 3 / 3.07 / 3.08 / 3.15 / 3.21 / 3.23 / 3.54 / 3.62 #> 8   1.513 / 1.615 / 1.835 / 1.935 / 2.14 / 2.2 / 2.32 / 2.465 / 2.62 / 2.77 #> 9  14.5 / 14.6 / 15.41 / 15.5 / 15.84 / 16.46 / 16.7 / 16.87 / 16.9 / 17.02 #> 10                                                                    0 / 1 #> 11                                                                    0 / 1 #> 12                                                                3 / 4 / 5 #> 13                                                    1 / 2 / 3 / 4 / 6 / 8 #>  #> $inspect_cars1 #>   1:nrow(i) variables   class nb_distinct prop_distinct nb_na prop_na nb_void #> 1     Obs =        50    <NA>        <NA>          <NA>  <NA>    <NA>    <NA> #> 2   Nvars =         2    <NA>        <NA>          <NA>  <NA>    <NA>    <NA> #> 3         1     speed numeric          19          0.38     0       0       0 #> 4         2      dist numeric          35           0.7     0       0       0 #>   prop_void    nchars                                    modalities #> 1      <NA>      <NA>                                          <NA> #> 2      <NA>      <NA>                                          <NA> #> 3         0     1 / 2   4 / 7 / 8 / 9 / 10 / 11 / 12 / 13 / 14 / 15 #> 4         0 1 / 2 / 3 2 / 4 / 10 / 14 / 16 / 17 / 18 / 20 / 22 / 24 #>  #> $inspect_cars2 #>    1:nrow(i) variables   class nb_distinct prop_distinct nb_na prop_na nb_void #> 1      Obs =        32    <NA>        <NA>          <NA>  <NA>    <NA>    <NA> #> 2    Nvars =        11    <NA>        <NA>          <NA>  <NA>    <NA>    <NA> #> 3          1       mpg numeric          25       0.78125     0       0       0 #> 4          2       cyl numeric           3       0.09375     0       0       0 #> 5          3      disp numeric          27       0.84375     0       0       0 #> 6          4        hp numeric          22        0.6875     0       0       0 #> 7          5      drat numeric          22        0.6875     0       0       0 #> 8          6        wt numeric          29       0.90625     0       0       0 #> 9          7      qsec numeric          30        0.9375     0       0       0 #> 10         8        vs numeric           2        0.0625     0       0       0 #> 11         9        am numeric           2        0.0625     0       0       0 #> 12        10      gear numeric           3       0.09375     0       0       0 #> 13        11      carb numeric           6        0.1875     0       0       0 #>    prop_void        nchars #> 1       <NA>          <NA> #> 2       <NA>          <NA> #> 3          0         2 / 4 #> 4          0             1 #> 5          0 2 / 3 / 4 / 5 #> 6          0         2 / 3 #> 7          0     1 / 3 / 4 #> 8          0     3 / 4 / 5 #> 9          0     2 / 4 / 5 #> 10         0             1 #> 11         0             1 #> 12         0             1 #> 13         0             1 #>                                                                  modalities #> 1                                                                      <NA> #> 2                                                                      <NA> #> 3         10.4 / 13.3 / 14.3 / 14.7 / 15 / 15.2 / 15.5 / 15.8 / 16.4 / 17.3 #> 4                                                                 4 / 6 / 8 #> 5        71.1 / 75.7 / 78.7 / 79 / 95.1 / 108 / 120.1 / 120.3 / 121 / 140.8 #> 6                         52 / 62 / 65 / 66 / 91 / 93 / 95 / 97 / 105 / 109 #> 7          2.76 / 2.93 / 3 / 3.07 / 3.08 / 3.15 / 3.21 / 3.23 / 3.54 / 3.62 #> 8   1.513 / 1.615 / 1.835 / 1.935 / 2.14 / 2.2 / 2.32 / 2.465 / 2.62 / 2.77 #> 9  14.5 / 14.6 / 15.41 / 15.5 / 15.84 / 16.46 / 16.7 / 16.87 / 16.9 / 17.02 #> 10                                                                    0 / 1 #> 11                                                                    0 / 1 #> 12                                                                3 / 4 / 5 #> 13                                                    1 / 2 / 3 / 4 / 6 / 8 #>  #> $vars_detect #>    vars_union cars1.rds cars2.rds #> 1       speed        ok         - #> 2        dist        ok         - #> 3         mpg         -        ok #> 4         cyl         -        ok #> 5        disp         -        ok #> 6          hp         -        ok #> 7        drat         -        ok #> 8          wt         -        ok #> 9        qsec         -        ok #> 10         vs         -        ok #> 11         am         -        ok #> 12       gear         -        ok #> 13       carb         -        ok #>  #> $vars_detect_everywhere #> [1] vars_union cars1.rds  cars2.rds  #> <0 rows> (or 0-length row.names) #>  #> $vars_detect_not_everywhere #>    vars_union cars1.rds cars2.rds #> 1       speed        ok         - #> 2        dist        ok         - #> 3         mpg         -        ok #> 4         cyl         -        ok #> 5        disp         -        ok #> 6          hp         -        ok #> 7        drat         -        ok #> 8          wt         -        ok #> 9        qsec         -        ok #> 10         vs         -        ok #> 11         am         -        ok #> 12       gear         -        ok #> 13       carb         -        ok #>  #> $vars_compclasses #>    vars_union cars1.rds cars2.rds #> 1       speed   numeric         - #> 2        dist   numeric         - #> 3         mpg         -   numeric #> 4         cyl         -   numeric #> 5        disp         -   numeric #> 6          hp         -   numeric #> 7        drat         -   numeric #> 8          wt         -   numeric #> 9        qsec         -   numeric #> 10         vs         -   numeric #> 11         am         -   numeric #> 12       gear         -   numeric #> 13       carb         -   numeric #>  #> $vars_compclasses_allsame #>    vars_union cars1.rds cars2.rds #> 1       speed   numeric         - #> 2        dist   numeric         - #> 3         mpg         -   numeric #> 4         cyl         -   numeric #> 5        disp         -   numeric #> 6          hp         -   numeric #> 7        drat         -   numeric #> 8          wt         -   numeric #> 9        qsec         -   numeric #> 10         vs         -   numeric #> 11         am         -   numeric #> 12       gear         -   numeric #> 13       carb         -   numeric #>  #> $vars_compclasses_not_allsame #> [1] vars_union cars1.rds  cars2.rds  #> <0 rows> (or 0-length row.names) #>              # code above illustrates all 10 sheets of the output  unlink(mydir, recursive = TRUE)"},{"path":"/reference/inspect_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect a data frame and write the output in an excel file — inspect_write","title":"Inspect a data frame and write the output in an excel file — inspect_write","text":"Inspect data frame write output excel file","code":""},{"path":"/reference/inspect_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect a data frame and write the output in an excel file — inspect_write","text":"","code":"inspect_write(data_frame_name, output_path, output_label = NULL)"},{"path":"/reference/inspect_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect a data frame and write the output in an excel file — inspect_write","text":"data_frame_name Character 1L. data.frame explore. Must exist Global Environment output_path Character 1L. Folder path write excel output output_label Character 1L. Optional 1-length character vector label output file. NULL, data_frame_name also used label","code":""},{"path":"/reference/inspect_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect a data frame and write the output in an excel file — inspect_write","text":"See output xlsx file. Variable list dataset systematic informations variable","code":""},{"path":"/reference/inspect_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect a data frame and write the output in an excel file — inspect_write","text":"","code":"library(magrittr) data(cars) mydir <- file.path(tempdir(), \"inspect_variants_tests_examples\") dir.create(mydir) inspect_write(data_frame_name = \"cars\",                output_path = mydir,                output_label = \"cars\") readxl::read_xlsx(file.path(mydir, \"inspect_cars.xlsx\")) #> # A tibble: 4 × 11 #>   `1:nrow(i)` variables class   nb_distinct prop_distinct nb_na prop_na nb_void #>   <chr>       <chr>     <chr>   <chr>       <chr>         <chr> <chr>   <chr>   #> 1 Obs =       50        NA      NA          NA            NA    NA      NA      #> 2 Nvars =     2         NA      NA          NA            NA    NA      NA      #> 3 1           speed     numeric 19          0.38          0     0       0       #> 4 2           dist      numeric 35          0.7           0     0       0       #> # ℹ 3 more variables: prop_void <chr>, nchars <chr>, modalities <chr> unlink(mydir, recursive = TRUE)"},{"path":"/reference/ljoin_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a classical dplyr::left_join() and add check information related to join — ljoin_checks","title":"Perform a classical dplyr::left_join() and add check information related to join — ljoin_checks","text":"Perform classical dplyr::left_join() add check information related join","code":""},{"path":"/reference/ljoin_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a classical dplyr::left_join() and add check information related to join — ljoin_checks","text":"","code":"ljoin_checks(ltable, rtable, ...)"},{"path":"/reference/ljoin_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a classical dplyr::left_join() and add check information related to join — ljoin_checks","text":"ltable Data.frame. Left data frame join rtable Data.frame. Right data frame join ... Params. arguments dplyr::left_join()","code":""},{"path":"/reference/ljoin_checks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a classical dplyr::left_join() and add check information related to join — ljoin_checks","text":"Data.frame. Output dplyr::left_join() messages number observations left, right joined data frames list common variables ltable rtable","code":""},{"path":"/reference/ljoin_checks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a classical dplyr::left_join() and add check information related to join — ljoin_checks","text":"","code":"left_table <- data.frame(\"person_id\" = c(1, 1, 2, 3,                                  2, 4, 5, 5 ,1),                  \"person_age\" = c(25, 25, 21, 32,                                   21, 48, 50, 50, 52),                  \"survey_month\" = c(\"jan\", \"feb\", \"mar\", \"apr\",                                     \"apr\", \"may\", \"jun\", \"jul\", \"jan\"),                  \"survey_answer\" = c(\"no\", \"yes\", \"no\", \"yes\",                                      \"yes\", \"yes\", \"no\", \"yes\", NA))  right_table <- data.frame(\"person_id\" = c(2, 5, 4, 3, 1),                            \"person_name\" = c(\"John\", \"Marie\", \"Pierre\", \"Marc\", \"Jimmy\"))  list(\"left_table\" = left_table,       \"right_table\" = right_table) #> $left_table #>   person_id person_age survey_month survey_answer #> 1         1         25          jan            no #> 2         1         25          feb           yes #> 3         2         21          mar            no #> 4         3         32          apr           yes #> 5         2         21          apr           yes #> 6         4         48          may           yes #> 7         5         50          jun            no #> 8         5         50          jul           yes #> 9         1         52          jan          <NA> #>  #> $right_table #>   person_id person_name #> 1         2        John #> 2         5       Marie #> 3         4      Pierre #> 4         3        Marc #> 5         1       Jimmy #>   ljoin_checks(left_table, right_table, by = \"person_id\") #> Checks :  #> ltable rows : 9 #> rtable rows :5 #> jtable rows : 9 #> person_id are common var names accross the two tables #>   person_id person_age survey_month survey_answer person_name #> 1         1         25          jan            no       Jimmy #> 2         1         25          feb           yes       Jimmy #> 3         2         21          mar            no        John #> 4         3         32          apr           yes        Marc #> 5         2         21          apr           yes        John #> 6         4         48          may           yes      Pierre #> 7         5         50          jun            no       Marie #> 8         5         50          jul           yes       Marie #> 9         1         52          jan          <NA>       Jimmy"},{"path":"/reference/mask_convert_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an excel mask compatible with the convert_r() function — mask_convert_r","title":"Create an excel mask compatible with the convert_r() function — mask_convert_r","text":"Create excel mask compatible convert_r() function","code":""},{"path":"/reference/mask_convert_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an excel mask compatible with the convert_r() function — mask_convert_r","text":"","code":"mask_convert_r(output_path, output_filename = \"mask_convert_r.xlsx\")"},{"path":"/reference/mask_convert_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an excel mask compatible with the convert_r() function — mask_convert_r","text":"output_path Character 1L. Folder path mask created output_filename Character 1L. File name (extension) mask","code":""},{"path":"/reference/mask_convert_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an excel mask compatible with the convert_r() function — mask_convert_r","text":"","code":"mydir <- file.path(tempdir(), \"convert_r_tests_examples\") dir.create(mydir)  mask_convert_r(output_path = mydir)  list.files(mydir) #> [1] \"mask_convert_r.xlsx\"  unlink(mydir, recursive = TRUE)"},{"path":"/reference/mask_rename_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an excel mask compatible with the rename_r() function. — mask_rename_r","title":"Create an excel mask compatible with the rename_r() function. — mask_rename_r","text":"Create excel mask compatible rename_r() function. must used collection files, .e stored within folder.","code":""},{"path":"/reference/mask_rename_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an excel mask compatible with the rename_r() function. — mask_rename_r","text":"","code":"mask_rename_r(input_path, output_filename = \"mask_rename_r.xlsx\")"},{"path":"/reference/mask_rename_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an excel mask compatible with the rename_r() function. — mask_rename_r","text":"input_path Character 1L. Folder containing set files rename output_filename Character 1L. File name excel mask.","code":""},{"path":"/reference/mask_rename_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an excel mask compatible with the rename_r() function. — mask_rename_r","text":"See created excel mask indicated input_path","code":""},{"path":"/reference/mask_rename_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an excel mask compatible with the rename_r() function. — mask_rename_r","text":"","code":"library(magrittr) data(cars) data(mtcars)  mydir <- tempfile() dir.create(mydir)  saveRDS(cars, file.path(mydir, \"cars.rds\")) saveRDS(mtcars, file.path(mydir, \"mtcars.rds\"))  list.files(mydir) #> [1] \"cars.rds\"   \"mtcars.rds\"  mask_rename_r(input_path = mydir)  list.files(mydir) #> [1] \"cars.rds\"           \"mask_rename_r.xlsx\" \"mtcars.rds\"          readxl::read_xlsx(file.path(mydir, \"mask_rename_r.xlsx\")) #> # A tibble: 2 × 3 #>   file       renamed_file to_rename #>   <chr>      <lgl>        <lgl>     #> 1 cars.rds   NA           NA        #> 2 mtcars.rds NA           NA         unlink(mydir, recursive = TRUE)"},{"path":"/reference/parallel_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a collection of datasets into the Global Environment (parallelized) — parallel_import","title":"Import a collection of datasets into the Global Environment (parallelized) — parallel_import","text":"Import collection datasets Global Environment (parallelized)","code":""},{"path":"/reference/parallel_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a collection of datasets into the Global Environment (parallelized) — parallel_import","text":"","code":"parallel_import(file_paths)"},{"path":"/reference/parallel_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a collection of datasets into the Global Environment (parallelized) — parallel_import","text":"file_paths Character. Vector valid absolute file paths datasets import. File names must unique.","code":""},{"path":"/reference/parallel_import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a collection of datasets into the Global Environment (parallelized) — parallel_import","text":"jobs completion, see datasets imported Global Environment","code":""},{"path":"/reference/parallel_import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a collection of datasets into the Global Environment (parallelized) — parallel_import","text":"","code":"mydir <- system.file(\"permadir_examples_and_tests/importations\", package = \"industtry\") lfiles <- list.files(mydir, full.names = TRUE)  if (isTRUE(rstudioapi::isAvailable())) {   parallel_import(lfiles)} else {     message(\"This function works only in RStudio.\")   } #> This function works only in RStudio."},{"path":"/reference/path_move.html","id":null,"dir":"Reference","previous_headings":"","what":"Move through paths — path_move","title":"Move through paths — path_move","text":"Move paths","code":""},{"path":"/reference/path_move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move through paths — path_move","text":"","code":"path_move(path_vector, path_separator = \"/\", move)"},{"path":"/reference/path_move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move through paths — path_move","text":"path_vector Character. Vector paths equal number levels path_separator Character 1L. Path separator (adapted OS instance) move Integer 1L. move > 0, outputs path till specified level move. move < 0, remove last specified level(s) move.","code":""},{"path":"/reference/path_move.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move through paths — path_move","text":"Character. Transformed vector paths.","code":""},{"path":"/reference/path_move.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move through paths — path_move","text":"","code":"pvector <- c(   \"level_1/level_2/level_3/file_1.ext\",    \"level_1/level_2/level_3/file_2.ext\" )  path_move(path_vector = pvector,            path_separator = \"/\",            move = 1) #> [1] \"level_1\" \"level_1\"  path_move(path_vector = pvector,            path_separator = \"/\",            move = 2) #> [1] \"level_1/level_2\" \"level_1/level_2\"  path_move(path_vector = pvector,            path_separator = \"/\",            move = - 1) #> [1] \"level_1/level_2/level_3\" \"level_1/level_2/level_3\"  path_move(path_vector = pvector,            path_separator = \"/\",            move = - 2) #> [1] \"level_1/level_2\" \"level_1/level_2\""},{"path":"/reference/rename_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Industrialized file renaming — rename_r","title":"Industrialized file renaming — rename_r","text":"Industrialized file renaming","code":""},{"path":"/reference/rename_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Industrialized file renaming — rename_r","text":"","code":"rename_r(mask_filepath)"},{"path":"/reference/rename_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Industrialized file renaming — rename_r","text":"mask_filepath Character 1L. Entire file path excel mask","code":""},{"path":"/reference/rename_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Industrialized file renaming — rename_r","text":"See file renamed within mask folder","code":""},{"path":"/reference/rename_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Industrialized file renaming — rename_r","text":"","code":"library(magrittr) data(cars) data(mtcars)  mydir <- tempfile() dir.create(mydir)  # Two example files to rename:  saveRDS(cars, file.path(mydir, \"cars.rds\")) saveRDS(mtcars, file.path(mydir, \"mtcars.rds\")) list.files(mydir) #> [1] \"cars.rds\"   \"mtcars.rds\"  # Create the mask:  mask_rename_r(input_path = mydir)  # Fill the mask (in practice you can do it manually):  mask <- rio::import(file.path(mydir, \"mask_rename_r.xlsx\")) mask[[\"renamed_file\"]] <- c(\"cars_renamed.rds\", \"mtcars_renamed.rds\") mask[[\"to_rename\"]] <- rep(1, 2) writexl::write_xlsx(mask, file.path(mydir, \"mask_rename_r.xlsx\"))  # Apply the rename function:  rename_r(mask_filepath = file.path(mydir, \"mask_rename_r.xlsx\")) #> $cars.rds #> [1] TRUE #>  #> $mtcars.rds #> [1] TRUE #>   # See the renamed files:  list.files(mydir) #> [1] \"cars_renamed.rds\"   \"mask_rename_r.xlsx\" \"mtcars_renamed.rds\"  # Clean tempdir:  unlink(mydir, recursive = TRUE)"},{"path":"/reference/replace_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace character vector values using a correspondence approach — replace_multiple","title":"Replace character vector values using a correspondence approach — replace_multiple","text":"Replace character vector values using correspondence approach","code":""},{"path":"/reference/replace_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace character vector values using a correspondence approach — replace_multiple","text":"","code":"replace_multiple(input_vector, replacements, replace_all = FALSE)"},{"path":"/reference/replace_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace character vector values using a correspondence approach — replace_multiple","text":"input_vector Character. Character vector replacements take place replacements Character. Named character vector: replacement correspondences replace_all Logical. TRUE, stringr::str_replace_all() used instead stringr::str_replace()","code":""},{"path":"/reference/replace_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace character vector values using a correspondence approach — replace_multiple","text":"","code":"input <- c(\"one-one\", \"two-two-one\", \"three-three-two\")  replace_multiple(input,                  replacements =                    c(\"one\" = \"1\", \"two\" = \"2\",                      \"three\" = \"3\")) #> [1] \"1-one\"       \"2-two-one\"   \"3-three-two\"  replace_multiple(input,                  replacements =                    c(\"one\" = \"1\", \"two\" = \"2\",                      \"three\" = \"3\"),                  replace_all = TRUE) #> [1] \"1-1\"     \"2-2-one\" \"3-3-two\""},{"path":"/reference/serial_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a collection of datasets into the Global Environment (serialized) — serial_import","title":"Import a collection of datasets into the Global Environment (serialized) — serial_import","text":"Import collection datasets Global Environment (serialized)","code":""},{"path":"/reference/serial_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a collection of datasets into the Global Environment (serialized) — serial_import","text":"","code":"serial_import(file_paths)"},{"path":"/reference/serial_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a collection of datasets into the Global Environment (serialized) — serial_import","text":"file_paths Character. Vector valid absolute file paths datasets import","code":""},{"path":"/reference/serial_import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a collection of datasets into the Global Environment (serialized) — serial_import","text":"completion, see datasets imported Global Environment","code":""},{"path":"/reference/serial_import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a collection of datasets into the Global Environment (serialized) — serial_import","text":"","code":"library(magrittr) mydir <- system.file(\"permadir_examples_and_tests/importations\", package = \"industtry\") lfiles <- list.files(mydir, full.names = TRUE) %>%    (\\(x) x[stringr::str_detect(x, \"\\\\.rds$\")])  # Launch this code and check your global env,  # cars.rds and mtcars.rds should be there:  serial_import(lfiles) #> [[1]] #> NULL #>  #> [[2]] #> NULL #>"},{"path":"/reference/table_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequencies and proportions in one output — table_prop","title":"Frequencies and proportions in one output — table_prop","text":"Combines base::table() base::prop.table() outputs single one","code":""},{"path":"/reference/table_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequencies and proportions in one output — table_prop","text":"","code":"table_prop(..., margin = NULL, round = 3, noquote = FALSE)"},{"path":"/reference/table_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequencies and proportions in one output — table_prop","text":"... Params. Arguments passed base::table() margin Integer 1L. argument base::prop.table() round Integer 1L. Number digits decimal base::prop.table() output noquote Logical 1L. TRUE, return object class noquote provides better view output","code":""},{"path":"/reference/table_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequencies and proportions in one output — table_prop","text":"Matrix noquote matrix. Frequencies proportions brackets, within matrix","code":""},{"path":"/reference/table_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequencies and proportions in one output — table_prop","text":"","code":"df <- data.frame(                  \"variable_1\" = c(\"v1_1\", \"v1_1\",                                   \"v1_2\", \"v1_2\", \"v1_2\", \"v1_2\"),                  \"variable_2\" = c(\"v2_1\", \"v2_1\", \"v2_1\", \"v2_1\",                                   \"v2_2\", \"v2_2\")                                   ) table_prop(df$variable_1) #>        #>        [,1]        #>   v1_1 \"2 (0.333)\" #>   v1_2 \"4 (0.667)\" table_prop(df$variable_1, df$variable_2) #>        #>        v2_1        v2_2        #>   v1_1 \"2 (0.333)\" \"0 (0)\"     #>   v1_2 \"2 (0.333)\" \"2 (0.333)\" table_prop(df$variable_1, df$variable_2, margin = 2, noquote = TRUE) #>        #>        v2_1    v2_2  #>   v1_1 2 (0.5) 0 (0) #>   v1_2 2 (0.5) 2 (1) df <- data.frame(\"person_id\" = c(1, 1, 2, 3,                                  2, 4, 5, 5 ,1),                  \"person_age\" = c(25, 25, 21, 32,                                   21, 48, 50, 50, 52),                  \"survey_month\" = c(\"jan\", \"feb\", \"mar\", \"apr\",                                     \"apr\", \"may\", \"jun\", \"jul\", \"jan\"),                  \"survey_answer\" = c(\"no\", \"yes\", \"no\", \"yes\",                                      \"yes\", \"yes\", \"no\", \"yes\", NA))  table_prop(df$survey_month) #>       #>       [,1]        #>   apr \"2 (0.222)\" #>   feb \"1 (0.111)\" #>   jan \"2 (0.222)\" #>   jul \"1 (0.111)\" #>   jun \"1 (0.111)\" #>   mar \"1 (0.111)\" #>   may \"1 (0.111)\" table_prop(df$survey_month, df$survey_answer) #>       #>       no          yes         #>   apr \"0 (0)\"     \"2 (0.25)\"  #>   feb \"0 (0)\"     \"1 (0.125)\" #>   jan \"1 (0.125)\" \"0 (0)\"     #>   jul \"0 (0)\"     \"1 (0.125)\" #>   jun \"1 (0.125)\" \"0 (0)\"     #>   mar \"1 (0.125)\" \"0 (0)\"     #>   may \"0 (0)\"     \"1 (0.125)\" table_prop(df$survey_month, df$survey_answer,             margin = 2, round = 4) #>       #>       no           yes       #>   apr \"0 (0)\"      \"2 (0.4)\" #>   feb \"0 (0)\"      \"1 (0.2)\" #>   jan \"1 (0.3333)\" \"0 (0)\"   #>   jul \"0 (0)\"      \"1 (0.2)\" #>   jun \"1 (0.3333)\" \"0 (0)\"   #>   mar \"1 (0.3333)\" \"0 (0)\"   #>   may \"0 (0)\"      \"1 (0.2)\""},{"path":"/reference/vars_compclasses.html","id":null,"dir":"Reference","previous_headings":"","what":"Collection-level variables types comparison — vars_compclasses","title":"Collection-level variables types comparison — vars_compclasses","text":"Collection-level variables types comparison","code":""},{"path":"/reference/vars_compclasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collection-level variables types comparison — vars_compclasses","text":"","code":"vars_compclasses(data_frames)"},{"path":"/reference/vars_compclasses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collection-level variables types comparison — vars_compclasses","text":"data_frames Character. datasets explore. Need exist Global Environment","code":""},{"path":"/reference/vars_compclasses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collection-level variables types comparison — vars_compclasses","text":"Variable list respective types across inputted datasets.","code":""},{"path":"/reference/vars_compclasses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collection-level variables types comparison — vars_compclasses","text":"","code":"library(magrittr) data(cars) data(mtcars) vars_compclasses(c(\"cars\", \"mtcars\")) #>    vars_union    cars  mtcars #> 1       speed numeric       - #> 2        dist numeric       - #> 3         mpg       - numeric #> 4         cyl       - numeric #> 5        disp       - numeric #> 6          hp       - numeric #> 7        drat       - numeric #> 8          wt       - numeric #> 9        qsec       - numeric #> 10         vs       - numeric #> 11         am       - numeric #> 12       gear       - numeric #> 13       carb       - numeric"},{"path":"/reference/vars_compclasses_allsame.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable class comparison - all of same type across all datasets — vars_compclasses_allsame","title":"Variable class comparison - all of same type across all datasets — vars_compclasses_allsame","text":"Variable class comparison - type across datasets","code":""},{"path":"/reference/vars_compclasses_allsame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable class comparison - all of same type across all datasets — vars_compclasses_allsame","text":"","code":"vars_compclasses_allsame(vars_compclasses_table)"},{"path":"/reference/vars_compclasses_allsame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable class comparison - all of same type across all datasets — vars_compclasses_allsame","text":"vars_compclasses_table Output vars_compclasses() function package.","code":""},{"path":"/reference/vars_compclasses_allsame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable class comparison - all of same type across all datasets — vars_compclasses_allsame","text":"vars_compclasses_table, extract type-consistent variables datasets.","code":""},{"path":"/reference/vars_compclasses_allsame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable class comparison - all of same type across all datasets — vars_compclasses_allsame","text":"","code":"library(magrittr) vcompclasses_table <- vars_compclasses(c(\"cars\", \"mtcars\")) vars_compclasses_allsame(vcompclasses_table) #>    vars_union    cars  mtcars #> 1       speed numeric       - #> 2        dist numeric       - #> 3         mpg       - numeric #> 4         cyl       - numeric #> 5        disp       - numeric #> 6          hp       - numeric #> 7        drat       - numeric #> 8          wt       - numeric #> 9        qsec       - numeric #> 10         vs       - numeric #> 11         am       - numeric #> 12       gear       - numeric #> 13       carb       - numeric library(magrittr) data(cars) data(mtcars) vcompclasses <- vars_compclasses(c(\"cars\", \"mtcars\")) vars_compclasses_allsame(vcompclasses) #>    vars_union    cars  mtcars #> 1       speed numeric       - #> 2        dist numeric       - #> 3         mpg       - numeric #> 4         cyl       - numeric #> 5        disp       - numeric #> 6          hp       - numeric #> 7        drat       - numeric #> 8          wt       - numeric #> 9        qsec       - numeric #> 10         vs       - numeric #> 11         am       - numeric #> 12       gear       - numeric #> 13       carb       - numeric"},{"path":"/reference/vars_compclasses_not_allsame.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable class comparison - not all of same type across all datasets — vars_compclasses_not_allsame","title":"Variable class comparison - not all of same type across all datasets — vars_compclasses_not_allsame","text":"Variable class comparison - type across datasets","code":""},{"path":"/reference/vars_compclasses_not_allsame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable class comparison - not all of same type across all datasets — vars_compclasses_not_allsame","text":"","code":"vars_compclasses_not_allsame(vars_compclasses_table)"},{"path":"/reference/vars_compclasses_not_allsame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable class comparison - not all of same type across all datasets — vars_compclasses_not_allsame","text":"vars_compclasses_table Output vars_compclasses() function package.","code":""},{"path":"/reference/vars_compclasses_not_allsame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable class comparison - not all of same type across all datasets — vars_compclasses_not_allsame","text":"vars_compclasses_table, extract type-inconsistent variables datasets.","code":""},{"path":"/reference/vars_compclasses_not_allsame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable class comparison - not all of same type across all datasets — vars_compclasses_not_allsame","text":"","code":"library(magrittr) vcompclasses_table <- vars_compclasses(c(\"cars\", \"mtcars\")) vars_compclasses_not_allsame(vcompclasses_table) #> [1] vars_union cars       mtcars     #> <0 rows> (or 0-length row.names) library(magrittr) data(cars) data(mtcars) vcompclasses <- vars_compclasses(c(\"cars\", \"mtcars\")) vars_compclasses_not_allsame(vcompclasses) #> [1] vars_union cars       mtcars     #> <0 rows> (or 0-length row.names)"},{"path":"/reference/vars_detect.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable detection patterns — vars_detect","title":"Variable detection patterns — vars_detect","text":"Variable detection patterns","code":""},{"path":"/reference/vars_detect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable detection patterns — vars_detect","text":"","code":"vars_detect(data_frames)"},{"path":"/reference/vars_detect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable detection patterns — vars_detect","text":"data_frames Character. datasets explore. Need exist Global Environment","code":""},{"path":"/reference/vars_detect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable detection patterns — vars_detect","text":"Variable list indicators presences/absences across inputted datasets.","code":""},{"path":"/reference/vars_detect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable detection patterns — vars_detect","text":"","code":"library(magrittr) data(cars) data(mtcars) vars_detect(c(\"cars\", \"mtcars\")) #> Joining by: union #> Joining by: union #>    vars_union cars mtcars #> 1       speed   ok      - #> 2        dist   ok      - #> 3         mpg    -     ok #> 4         cyl    -     ok #> 5        disp    -     ok #> 6          hp    -     ok #> 7        drat    -     ok #> 8          wt    -     ok #> 9        qsec    -     ok #> 10         vs    -     ok #> 11         am    -     ok #> 12       gear    -     ok #> 13       carb    -     ok"},{"path":"/reference/vars_detect_everywhere.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable detection - presence across all the datasets — vars_detect_everywhere","title":"Variable detection - presence across all the datasets — vars_detect_everywhere","text":"Variable detection - presence across datasets","code":""},{"path":"/reference/vars_detect_everywhere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable detection - presence across all the datasets — vars_detect_everywhere","text":"","code":"vars_detect_everywhere(vars_detect_table)"},{"path":"/reference/vars_detect_everywhere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable detection - presence across all the datasets — vars_detect_everywhere","text":"vars_detect_table Output vars_detect() function package. object must exists Global Environment.","code":""},{"path":"/reference/vars_detect_everywhere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable detection - presence across all the datasets — vars_detect_everywhere","text":"vars_detect_table, extract variables always present datasets.","code":""},{"path":"/reference/vars_detect_everywhere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable detection - presence across all the datasets — vars_detect_everywhere","text":"","code":"library(magrittr) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data(cars) data(mtcars) vdetect_table <- vars_detect(c(\"cars\", \"mtcars\")) #> Joining by: union #> Joining by: union vars_detect_everywhere(vdetect_table) #> [1] vars_union cars       mtcars     #> <0 rows> (or 0-length row.names)"},{"path":"/reference/vars_detect_not_everywhere.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable detection - inconsistent patterns — vars_detect_not_everywhere","title":"Variable detection - inconsistent patterns — vars_detect_not_everywhere","text":"Variable detection - inconsistent patterns","code":""},{"path":"/reference/vars_detect_not_everywhere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable detection - inconsistent patterns — vars_detect_not_everywhere","text":"","code":"vars_detect_not_everywhere(vars_detect_table)"},{"path":"/reference/vars_detect_not_everywhere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable detection - inconsistent patterns — vars_detect_not_everywhere","text":"vars_detect_table Output vars_detect() function package. object must exists Global Environment.","code":""},{"path":"/reference/vars_detect_not_everywhere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable detection - inconsistent patterns — vars_detect_not_everywhere","text":"vars_detect_table, extract variables always present datasets.","code":""},{"path":"/reference/vars_detect_not_everywhere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable detection - inconsistent patterns — vars_detect_not_everywhere","text":"","code":"library(magrittr) data(cars) data(mtcars) vdetect_table <- vars_detect(c(\"cars\", \"mtcars\")) #> Joining by: union #> Joining by: union vars_detect_not_everywhere(vdetect_table) #>    vars_union cars mtcars #> 1       speed   ok      - #> 2        dist   ok      - #> 3         mpg    -     ok #> 4         cyl    -     ok #> 5        disp    -     ok #> 6          hp    -     ok #> 7        drat    -     ok #> 8          wt    -     ok #> 9        qsec    -     ok #> 10         vs    -     ok #> 11         am    -     ok #> 12       gear    -     ok #> 13       carb    -     ok"},{"path":"/news/index.html","id":"industtry-020","dir":"Changelog","previous_headings":"","what":"industtry 0.2.0","title":"industtry 0.2.0","text":"Enhancements short docs. Add long docs. Polish.","code":""},{"path":"/news/index.html","id":"industtry-010","dir":"Changelog","previous_headings":"","what":"industtry 0.1.0","title":"industtry 0.1.0","text":"Dev enchancements : Add examples tests far possible. Correction warnings notes. complete documentation.","code":""}]
